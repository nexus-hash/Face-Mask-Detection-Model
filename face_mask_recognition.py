# -*- coding: utf-8 -*-
"""Face Mask Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zIE6svFDjT1tR23GIU6EnCHFOavicx0O
"""

import cv2,os
data_path='dataset/dataset'
data_categories=os.listdir(data_path)
labels=[i for i in range(len(data_categories))]
label_dict=dict(zip(data_categories,labels))
print(label_dict)
print(data_categories)
print(labels)

image_size = 120
image_data=[]
target=[]

for data_category in data_categories:
  folder_path=os.path.join(data_path,data_category)
  image_names=os.listdir(folder_path)

  for image_name in image_names:
    image_path=os.path.join(folder_path,image_name)
    image=cv2.imread(image_path)

    try:
      #Converting image to a single color i.e gray scale
      gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
      #resizing a image to size 120x120 since we need a fixed size for all image to work on
      resized=cv2.resize(gray,(image_size,image_size))
      image_data.append(resized)
      #appending the image and the label(categorized) into the list
      target.append(label_dict[data_category])

      #While parsing through images if any image is not found or anything else exception is generated
      #It gets caught and without stopping the loop it continnues to the next image
    except Exception as k:
      print('Exception:',k)

import numpy as np

image_data=np.array(image_data)/255.0
image_data=np.reshape(image_data,(image_data.shape[0],image_size,image_size,1))
target=np.array(target)


from keras.utils import np_utils


target= np_utils.to_categorical(target)

from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D
from keras.layers import Dense,Activation,Flatten,Dropout
from keras.callbacks import ModelCheckpoint

model=Sequential()

#1st Convolutional layer
model.add(Conv2D(200,(3,3),input_shape=image_data.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#2nd Convolutional layer
model.add(Conv2D(100,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#Flattening Layer to stack the output from the 2nd Convolutional layer
model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(50,activation='relu'))
#Final layer with two output for 2 categories
model.add(Dense(2,activation='softmax'))


model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

from sklearn.model_selection import train_test_split

train_data,test_data,train_target,test_target=train_test_split(image_data,target,test_size=0.1)

history=model.fit(train_data,train_target,epochs=20,validation_split=0.2)